name: 'Terraform'

on:
  push:
    branches:
    - "master"
  pull_request:
env:
  ARM_USE_MSI: true
  ARM_SUBSCRIPTION_ID: 3c77aee9-6f8b-4f87-8ff4-1e85ca74f8be
  ARM_TENANT_ID: cb051081-0828-4f81-b5ae-b6c75a0caa81
  ARM_CLIENT_ID:  6b5f1478-dbc8-4b23-b5bf-c7ba1eadd1fa

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: self-hosted
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: YHrzispc3GWkfA.atlasv1.rzpf9pHW4fQa2TX3oUwkDPUY6V8Sh97C0RMur6e9ZPXHYtjsZNHchQCf4yhVgzWnChg
        terraform_wrapper: false

    

    - name: az account set
      run: az account set -s "CloudCover Playground"

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config=setup.conf -reconfigure
      env:
        ARM_USE_MSI: true
        ARM_SUBSCRIPTION_ID: 3c77aee9-6f8b-4f87-8ff4-1e85ca74f8be
        ARM_TENANT_ID: cb051081-0828-4f81-b5ae-b6c75a0caa81
        ARM_CLIENT_ID: 6b5f1478-dbc8-4b23-b5bf-c7ba1eadd1fa

    - name: az login
      run: az login --identity 

    # Checks that all Terraform configuration files adhere to a canonical format
    

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      #if: github.ref == 'refs/heads/"master"' or github.event_name == 'push'
      run: terraform apply -auto-approve -input=false



      #get spn detials for interview
     -name: get spn id
      run: terraform output SPN_username

     -name: get spn password
      run: terraform output spn_password 

     -name: get spn tenant id
      run: terraform output SPN_tenant_id